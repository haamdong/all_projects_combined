import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from datetime import datetime, timedelta
from scipy.interpolate import CubicSpline

plt.rcParams['font.family'] = 'Malgun Gothic'

# 실측치 데이터 포인트
points = [(0, -3), (2, -4), (4,-4.5), 
          (6, -5), (8, -1), (10, 4) , 
          (12, 6) , (14, 7), (15, 11), 
          (17, 9), (19, 4),(21, 1), (23, -1)]
t_points, T_points = zip(*points)
cs = CubicSpline(t_points, T_points)  # 보간 함수 생성

# 고정된 기온 값 설정
min_temp = -5  # 새벽 3시의 최저 기온 (섭씨)
max_temp = 8  # 낮 최고 기온 (섭씨)

# 파라미터 설정
height = 2000  # 대기 높이 (m)
n_layers = 100  # 층의 수
dt = 180  # 시간 간격
total_time = 24 * 3600
n_steps = int(total_time / dt)

# 초기 조건 설정 (새벽 3시 상태)
T = np.linspace(min_temp, min_temp - 5, n_layers)  # 초기 온도 분포
z = np.linspace(0, height, n_layers)  # 높이 배열

# 시작 시간 설정
start_time = datetime.now().replace(hour=6, minute=0, 
                                    second=0, microsecond=0)

def get_Alpha(t):
    # t는 초 단위 시간
    hour = (t / 3600) % 24  # 시각을 시간 단위로 변환
    
    if hour >= 6 and hour < 18:  # 낮 시간대
        return 0.000021 + (hour - 6) / 12 * (0.0001 - 0.000021)
    elif hour >= 18:  # 저녁 시간대 (해질녘)
        return 0.0001 - (hour - 18) / 6 * (0.0001 - 0.000021)
    else:  # 밤 시간대
        return 0.000021



# 지표면 온도 변화 함수
def surface_temperature(t):
    return cs(t / 3600)  # t를 시간 단위로 변환하여 보간 함수 호출

# 시뮬레이션 함수
def simulate_step(T, t):
    dz = height / (n_layers - 1)
    
    # 시간에 따른 Alpha 값 설정
    Alpha = 100*get_Alpha(t)
    
    # 기본 열 확산 계산
    dTdt = np.zeros_like(T)
    dTdt[1:-1] = Alpha * (T[2:] - 2 * T[1:-1] + T[:-2]) / dz**2
    '''
    # 햇빛에 의한 추가 가열 효과 (낮 시간에만 작동)
    hour = (t / 3600) % 24
    if 6 <= hour < 18:
        solar_heating = 0.1 * (1 - np.exp(-(hour - 6) / 2))  # 시간에 따라 증가하는 가열
        dTdt[0] += solar_heating  # 지표면 가열
        dTdt[2] += solar_heating * 0.5  # 하층부 가열
    '''
    # 경계 조건
    T[0] = surface_temperature(t)  # 지표면 온도
    T[-1] = T[-2]  # 상부 경계 조건
    
    # 시간에 따른 온도 업데이트
    T += dTdt * dt
    
    return T




# 그래프 초기화
fig, ax = plt.subplots(figsize=(10, 6))
line, = ax.plot(T, z)
ax.set_xlim(min_temp - 10, max_temp + 5)
ax.set_ylim(0, height)
ax.set_xlabel('기온 (°C)')
ax.set_ylabel('고도 (m)')
ax.set_title('대기 온도 개요')

# 현재 시간을 표시할 텍스트 객체
time_text = ax.text(0.02, 0.95, '', transform=ax.transAxes, fontsize=12)

# 애니메이션 업데이트 함수
def update(frame):
    global T
    t = frame * dt
    T = simulate_step(T, t)
    line.set_xdata(T)
    
    current_time = start_time + timedelta(seconds=t)
    time_text.set_text(f'Current Time: {current_time.strftime("%H:%M")}')
    
    return line, time_text

# 애니메이션 생성
anim = FuncAnimation(fig, update, frames=n_steps, interval=50, blit=True)

plt.tight_layout()
plt.show()
